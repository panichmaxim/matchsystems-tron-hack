// Code generated by gowrap. DO NOT EDIT.
// template: ../../resources/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package service

//go:generate gowrap gen -p gitlab.com/rubin-dev/api/pkg/service -i Service -t ../../resources/opentelemetry -o otlp.go -l ""

import (
	"context"
	"time"

	"gitlab.com/rubin-dev/api/pkg/elastic"
	"gitlab.com/rubin-dev/api/pkg/models"
	"gitlab.com/rubin-dev/api/pkg/neo4jstore"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ServiceWithTracing implements Service interface instrumented with opentracing spans
type ServiceWithTracing struct {
	Service
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewServiceWithTracing returns ServiceWithTracing
func NewServiceWithTracing(base Service, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ServiceWithTracing {
	d := ServiceWithTracing{
		Service:   base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// AccessRequest implements Service
func (_d ServiceWithTracing) AccessRequest(ctx context.Context, user *models.User) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.AccessRequest")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"user": user}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.AccessRequest(ctx, user)
}

// BillingAddRequests implements Service
func (_d ServiceWithTracing) BillingAddRequests(ctx context.Context, userID int64, requests int) (bp1 *models.BillingPacket, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingAddRequests")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"userID":   userID,
				"requests": requests}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingAddRequests(ctx, userID, requests)
}

// BillingCreateApiKey implements Service
func (_d ServiceWithTracing) BillingCreateApiKey(ctx context.Context, userID int64) (bp1 *models.BillingKey, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingCreateApiKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"userID": userID}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingCreateApiKey(ctx, userID)
}

// BillingFindApiKey implements Service
func (_d ServiceWithTracing) BillingFindApiKey(ctx context.Context, apiKey string) (bp1 *models.BillingKey, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingFindApiKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"apiKey": apiKey}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingFindApiKey(ctx, apiKey)
}

// BillingGetOrCreate implements Service
func (_d ServiceWithTracing) BillingGetOrCreate(ctx context.Context, userID int64) (bp1 *models.Billing, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingGetOrCreate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"userID": userID}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingGetOrCreate(ctx, userID)
}

// BillingHistoryList implements Service
func (_d ServiceWithTracing) BillingHistoryList(ctx context.Context, userID int64, page int, pageSize int, from *time.Time, to *time.Time, last *bool) (bpa1 []*models.BillingRequest, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingHistoryList")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"userID":   userID,
				"page":     page,
				"pageSize": pageSize,
				"from":     from,
				"to":       to,
				"last":     last}, map[string]interface{}{
				"bpa1": bpa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingHistoryList(ctx, userID, page, pageSize, from, to, last)
}

// BillingHistoryRequestsCount implements Service
func (_d ServiceWithTracing) BillingHistoryRequestsCount(ctx context.Context, userID int64) (i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingHistoryRequestsCount")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"userID": userID}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingHistoryRequestsCount(ctx, userID)
}

// BillingKeyList implements Service
func (_d ServiceWithTracing) BillingKeyList(ctx context.Context, userID int64, page int, pageSize int) (bpa1 []*models.BillingKey, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingKeyList")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"userID":   userID,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"bpa1": bpa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingKeyList(ctx, userID, page, pageSize)
}

// BillingKeyRemove implements Service
func (_d ServiceWithTracing) BillingKeyRemove(ctx context.Context, userID int64, id int64) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingKeyRemove")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"userID": userID,
				"id":     id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingKeyRemove(ctx, userID, id)
}

// BillingRegisterRequest implements Service
func (_d ServiceWithTracing) BillingRegisterRequest(ctx context.Context, userID int64, query string, risk *neo4jstore.Risk, network string) (bp1 *models.Billing, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingRegisterRequest")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"userID":  userID,
				"query":   query,
				"risk":    risk,
				"network": network}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingRegisterRequest(ctx, userID, query, risk, network)
}

// BillingRiskFindCategoriesAndDirectories implements Service
func (_d ServiceWithTracing) BillingRiskFindCategoriesAndDirectories(ctx context.Context, userID int64, from *time.Time, to *time.Time, network string, last *bool) (m1 map[string]int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingRiskFindCategoriesAndDirectories")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"userID":  userID,
				"from":    from,
				"to":      to,
				"network": network,
				"last":    last}, map[string]interface{}{
				"m1":  m1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingRiskFindCategoriesAndDirectories(ctx, userID, from, to, network, last)
}

// BillingRisks implements Service
func (_d ServiceWithTracing) BillingRisks(ctx context.Context, id int64) (bpa1 []*models.BillingRisk, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingRisks")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"bpa1": bpa1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingRisks(ctx, id)
}

// BillingStatisticsNetwork implements Service
func (_d ServiceWithTracing) BillingStatisticsNetwork(ctx context.Context, userID int64, from *time.Time, to *time.Time, network string, last *bool) (bp1 *models.BillingStatisticsBlockchain, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingStatisticsNetwork")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"userID":  userID,
				"from":    from,
				"to":      to,
				"network": network,
				"last":    last}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingStatisticsNetwork(ctx, userID, from, to, network, last)
}

// BillingStatisticsRiskRanges implements Service
func (_d ServiceWithTracing) BillingStatisticsRiskRanges(ctx context.Context, userID int64, from *time.Time, to *time.Time, network string, last *bool) (ia1 []int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingStatisticsRiskRanges")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"userID":  userID,
				"from":    from,
				"to":      to,
				"network": network,
				"last":    last}, map[string]interface{}{
				"ia1": ia1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingStatisticsRiskRanges(ctx, userID, from, to, network, last)
}

// BillingStatisticsRisks implements Service
func (_d ServiceWithTracing) BillingStatisticsRisks(ctx context.Context, userID int64, from *time.Time, to *time.Time, network string, last *bool) (bpa1 []*models.BillingRisk, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingStatisticsRisks")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"userID":  userID,
				"from":    from,
				"to":      to,
				"network": network,
				"last":    last}, map[string]interface{}{
				"bpa1": bpa1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingStatisticsRisks(ctx, userID, from, to, network, last)
}

// BillingStatisticsSummary implements Service
func (_d ServiceWithTracing) BillingStatisticsSummary(ctx context.Context, userID int64, from *time.Time, to *time.Time, last *bool) (spa1 []*models.StatisticsSummary, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BillingStatisticsSummary")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"userID": userID,
				"from":   from,
				"to":     to,
				"last":   last}, map[string]interface{}{
				"spa1": spa1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BillingStatisticsSummary(ctx, userID, from, to, last)
}

// BtcFindAddressByHash implements Service
func (_d ServiceWithTracing) BtcFindAddressByHash(ctx context.Context, address string) (fp1 *neo4jstore.FindAddressByHashNode, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindAddressByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"fp1": fp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindAddressByHash(ctx, address)
}

// BtcFindBlockByHash implements Service
func (_d ServiceWithTracing) BtcFindBlockByHash(ctx context.Context, hash string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindBlockByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"hash": hash}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindBlockByHash(ctx, hash)
}

// BtcFindBlockByHeight implements Service
func (_d ServiceWithTracing) BtcFindBlockByHeight(ctx context.Context, height int) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindBlockByHeight")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"height": height}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindBlockByHeight(ctx, height)
}

// BtcFindBlockByTransaction implements Service
func (_d ServiceWithTracing) BtcFindBlockByTransaction(ctx context.Context, txid string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindBlockByTransaction")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"txid": txid}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindBlockByTransaction(ctx, txid)
}

// BtcFindContactByAddress implements Service
func (_d ServiceWithTracing) BtcFindContactByAddress(ctx context.Context, address string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindContactByAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindContactByAddress(ctx, address)
}

// BtcFindIncomingTransactions implements Service
func (_d ServiceWithTracing) BtcFindIncomingTransactions(ctx context.Context, txid string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindIncomingTransactions")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"txid":     txid,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindIncomingTransactions(ctx, txid, page, pageSize)
}

// BtcFindMentionsForAddress implements Service
func (_d ServiceWithTracing) BtcFindMentionsForAddress(ctx context.Context, address string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindMentionsForAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"address":  address,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindMentionsForAddress(ctx, address, page, pageSize)
}

// BtcFindOutcomingTransactions implements Service
func (_d ServiceWithTracing) BtcFindOutcomingTransactions(ctx context.Context, txid string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindOutcomingTransactions")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"txid":     txid,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindOutcomingTransactions(ctx, txid, page, pageSize)
}

// BtcFindTransactionByHash implements Service
func (_d ServiceWithTracing) BtcFindTransactionByHash(ctx context.Context, address string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindTransactionByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindTransactionByHash(ctx, address)
}

// BtcFindTransactionsByAddress implements Service
func (_d ServiceWithTracing) BtcFindTransactionsByAddress(ctx context.Context, address string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindTransactionsByAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"address":  address,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindTransactionsByAddress(ctx, address, page, pageSize)
}

// BtcFindTransactionsInBlock implements Service
func (_d ServiceWithTracing) BtcFindTransactionsInBlock(ctx context.Context, height int, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindTransactionsInBlock")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"height":   height,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindTransactionsInBlock(ctx, height, page, pageSize)
}

// BtcFindTransactionsInBlockByHash implements Service
func (_d ServiceWithTracing) BtcFindTransactionsInBlockByHash(ctx context.Context, hash string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindTransactionsInBlockByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"hash":     hash,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindTransactionsInBlockByHash(ctx, hash, page, pageSize)
}

// BtcFindWalletAddresses implements Service
func (_d ServiceWithTracing) BtcFindWalletAddresses(ctx context.Context, wid string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindWalletAddresses")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"wid":      wid,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindWalletAddresses(ctx, wid, page, pageSize)
}

// BtcFindWalletByWid implements Service
func (_d ServiceWithTracing) BtcFindWalletByWid(ctx context.Context, wid string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindWalletByWid")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"wid": wid}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindWalletByWid(ctx, wid)
}

// BtcFindWalletForAddress implements Service
func (_d ServiceWithTracing) BtcFindWalletForAddress(ctx context.Context, address string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcFindWalletForAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcFindWalletForAddress(ctx, address)
}

// BtcRisk implements Service
func (_d ServiceWithTracing) BtcRisk(ctx context.Context, address string) (rp1 *neo4jstore.Risk, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.BtcRisk")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"rp1": rp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.BtcRisk(ctx, address)
}

// CategoryAllList implements Service
func (_d ServiceWithTracing) CategoryAllList(ctx context.Context) (u []*models.Category, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryAllList")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"u":   u,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryAllList(ctx)
}

// CategoryCreate implements Service
func (_d ServiceWithTracing) CategoryCreate(ctx context.Context, category *models.Category) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryCreate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"category": category}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryCreate(ctx, category)
}

// CategoryFindByID implements Service
func (_d ServiceWithTracing) CategoryFindByID(ctx context.Context, id int64) (cp1 *models.Category, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryFindByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"cp1": cp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryFindByID(ctx, id)
}

// CategoryFindByName implements Service
func (_d ServiceWithTracing) CategoryFindByName(ctx context.Context, name string) (cp1 *models.Category, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryFindByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"name": name}, map[string]interface{}{
				"cp1": cp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryFindByName(ctx, name)
}

// CategoryFindByNumber implements Service
func (_d ServiceWithTracing) CategoryFindByNumber(ctx context.Context, id int) (cp1 *models.Category, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryFindByNumber")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"cp1": cp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryFindByNumber(ctx, id)
}

// CategoryList implements Service
func (_d ServiceWithTracing) CategoryList(ctx context.Context, id *int64) (u []*models.Category, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryList")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"u":   u,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryList(ctx, id)
}

// CategoryRemoveByID implements Service
func (_d ServiceWithTracing) CategoryRemoveByID(ctx context.Context, id int64) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryRemoveByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryRemoveByID(ctx, id)
}

// CategoryUpdate implements Service
func (_d ServiceWithTracing) CategoryUpdate(ctx context.Context, category *models.Category, columns ...string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CategoryUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"category": category,
				"columns":  columns}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CategoryUpdate(ctx, category, columns...)
}

// ChangePassword implements Service
func (_d ServiceWithTracing) ChangePassword(ctx context.Context, req *models.ChangePasswordRequest) (jp1 *models.Jwt, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.ChangePassword")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"jp1": jp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.ChangePassword(ctx, req)
}

// Close implements Service
func (_d ServiceWithTracing) Close(ctx context.Context) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.Close")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.Close(ctx)
}

// EthFindAddressByHash implements Service
func (_d ServiceWithTracing) EthFindAddressByHash(ctx context.Context, address string) (fp1 *neo4jstore.FindAddressByHashNode, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindAddressByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"fp1": fp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindAddressByHash(ctx, address)
}

// EthFindBlockByHash implements Service
func (_d ServiceWithTracing) EthFindBlockByHash(ctx context.Context, hash string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindBlockByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"hash": hash}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindBlockByHash(ctx, hash)
}

// EthFindBlockByHeight implements Service
func (_d ServiceWithTracing) EthFindBlockByHeight(ctx context.Context, height int) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindBlockByHeight")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"height": height}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindBlockByHeight(ctx, height)
}

// EthFindBlockByTransaction implements Service
func (_d ServiceWithTracing) EthFindBlockByTransaction(ctx context.Context, txid string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindBlockByTransaction")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"txid": txid}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindBlockByTransaction(ctx, txid)
}

// EthFindContactByAddress implements Service
func (_d ServiceWithTracing) EthFindContactByAddress(ctx context.Context, address string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindContactByAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindContactByAddress(ctx, address)
}

// EthFindIncomingTransactions implements Service
func (_d ServiceWithTracing) EthFindIncomingTransactions(ctx context.Context, txid string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindIncomingTransactions")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"txid":     txid,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindIncomingTransactions(ctx, txid, page, pageSize)
}

// EthFindMentionsForAddress implements Service
func (_d ServiceWithTracing) EthFindMentionsForAddress(ctx context.Context, address string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindMentionsForAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"address":  address,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindMentionsForAddress(ctx, address, page, pageSize)
}

// EthFindOutcomingTransactions implements Service
func (_d ServiceWithTracing) EthFindOutcomingTransactions(ctx context.Context, txid string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindOutcomingTransactions")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"txid":     txid,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindOutcomingTransactions(ctx, txid, page, pageSize)
}

// EthFindTransactionByHash implements Service
func (_d ServiceWithTracing) EthFindTransactionByHash(ctx context.Context, address string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindTransactionByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindTransactionByHash(ctx, address)
}

// EthFindTransactionsByAddress implements Service
func (_d ServiceWithTracing) EthFindTransactionsByAddress(ctx context.Context, address string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindTransactionsByAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"address":  address,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindTransactionsByAddress(ctx, address, page, pageSize)
}

// EthFindTransactionsInBlock implements Service
func (_d ServiceWithTracing) EthFindTransactionsInBlock(ctx context.Context, height int, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthFindTransactionsInBlock")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"height":   height,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthFindTransactionsInBlock(ctx, height, page, pageSize)
}

// EthRisk implements Service
func (_d ServiceWithTracing) EthRisk(ctx context.Context, address string) (rp1 *neo4jstore.Risk, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.EthRisk")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"rp1": rp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.EthRisk(ctx, address)
}

// ForceLogin implements Service
func (_d ServiceWithTracing) ForceLogin(ctx context.Context, id int64) (jp1 *models.Jwt, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.ForceLogin")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"jp1": jp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.ForceLogin(ctx, id)
}

// GetUserFromRefreshToken implements Service
func (_d ServiceWithTracing) GetUserFromRefreshToken(ctx context.Context, refreshToken string) (up1 *models.User, jp1 *models.Jwt, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.GetUserFromRefreshToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":          ctx,
				"refreshToken": refreshToken}, map[string]interface{}{
				"up1": up1,
				"jp1": jp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.GetUserFromRefreshToken(ctx, refreshToken)
}

// GetUserFromRequest implements Service
func (_d ServiceWithTracing) GetUserFromRequest(ctx context.Context, accessToken string) (up1 *models.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.GetUserFromRequest")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"accessToken": accessToken}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.GetUserFromRequest(ctx, accessToken)
}

// Health implements Service
func (_d ServiceWithTracing) Health(ctx context.Context) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.Health")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.Health(ctx)
}

// Login implements Service
func (_d ServiceWithTracing) Login(ctx context.Context, req *models.LoginRequest) (jp1 *models.Jwt, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.Login")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"jp1": jp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.Login(ctx, req)
}

// RefreshToken implements Service
func (_d ServiceWithTracing) RefreshToken(ctx context.Context, req *models.TokenRequest) (jp1 *models.Jwt, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.RefreshToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"jp1": jp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.RefreshToken(ctx, req)
}

// Registration implements Service
func (_d ServiceWithTracing) Registration(ctx context.Context, req *models.RegistrationRequest) (up1 *models.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.Registration")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.Registration(ctx, req)
}

// RegistrationConfirm implements Service
func (_d ServiceWithTracing) RegistrationConfirm(ctx context.Context, req *models.TokenRequest) (up1 *models.User, jp1 *models.Jwt, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.RegistrationConfirm")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"up1": up1,
				"jp1": jp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.RegistrationConfirm(ctx, req)
}

// Restore implements Service
func (_d ServiceWithTracing) Restore(ctx context.Context, req *models.RestoreRequest) (up1 *models.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.Restore")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.Restore(ctx, req)
}

// RestoreCheck implements Service
func (_d ServiceWithTracing) RestoreCheck(ctx context.Context, req *models.TokenRequest) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.RestoreCheck")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.RestoreCheck(ctx, req)
}

// RestoreConfirm implements Service
func (_d ServiceWithTracing) RestoreConfirm(ctx context.Context, req *models.RestoreConfirmRequest) (up1 *models.User, jp1 *models.Jwt, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.RestoreConfirm")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"up1": up1,
				"jp1": jp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.RestoreConfirm(ctx, req)
}

// Search implements Service
func (_d ServiceWithTracing) Search(ctx context.Context, value string, page int, limit int, wildcard bool) (epa1 []*elastic.Entity, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.Search")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"value":    value,
				"page":     page,
				"limit":    limit,
				"wildcard": wildcard}, map[string]interface{}{
				"epa1": epa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.Search(ctx, value, page, limit, wildcard)
}

// SearchCount implements Service
func (_d ServiceWithTracing) SearchCount(ctx context.Context, value string, wildcard bool) (i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.SearchCount")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"value":    value,
				"wildcard": wildcard}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.SearchCount(ctx, value, wildcard)
}

// TronFindAddressByHash implements Service
func (_d ServiceWithTracing) TronFindAddressByHash(ctx context.Context, address string) (fp1 *neo4jstore.FindAddressByHashNode, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindAddressByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"fp1": fp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindAddressByHash(ctx, address)
}

// TronFindBlockByHash implements Service
func (_d ServiceWithTracing) TronFindBlockByHash(ctx context.Context, hash string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindBlockByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"hash": hash}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindBlockByHash(ctx, hash)
}

// TronFindBlockByHeight implements Service
func (_d ServiceWithTracing) TronFindBlockByHeight(ctx context.Context, height int) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindBlockByHeight")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"height": height}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindBlockByHeight(ctx, height)
}

// TronFindBlockByTransaction implements Service
func (_d ServiceWithTracing) TronFindBlockByTransaction(ctx context.Context, txid string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindBlockByTransaction")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"txid": txid}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindBlockByTransaction(ctx, txid)
}

// TronFindContactByAddress implements Service
func (_d ServiceWithTracing) TronFindContactByAddress(ctx context.Context, address string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindContactByAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindContactByAddress(ctx, address)
}

// TronFindIncomingTransactions implements Service
func (_d ServiceWithTracing) TronFindIncomingTransactions(ctx context.Context, txid string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindIncomingTransactions")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"txid":     txid,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindIncomingTransactions(ctx, txid, page, pageSize)
}

// TronFindMentionsForAddress implements Service
func (_d ServiceWithTracing) TronFindMentionsForAddress(ctx context.Context, address string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindMentionsForAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"address":  address,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindMentionsForAddress(ctx, address, page, pageSize)
}

// TronFindOutcomingTransactions implements Service
func (_d ServiceWithTracing) TronFindOutcomingTransactions(ctx context.Context, txid string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindOutcomingTransactions")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"txid":     txid,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindOutcomingTransactions(ctx, txid, page, pageSize)
}

// TronFindTransactionByHash implements Service
func (_d ServiceWithTracing) TronFindTransactionByHash(ctx context.Context, address string) (np1 *neo4jstore.Node, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindTransactionByHash")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"np1": np1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindTransactionByHash(ctx, address)
}

// TronFindTransactionsByAddress implements Service
func (_d ServiceWithTracing) TronFindTransactionsByAddress(ctx context.Context, address string, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindTransactionsByAddress")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"address":  address,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindTransactionsByAddress(ctx, address, page, pageSize)
}

// TronFindTransactionsInBlock implements Service
func (_d ServiceWithTracing) TronFindTransactionsInBlock(ctx context.Context, height int, page int, pageSize int) (npa1 []*neo4jstore.Node, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronFindTransactionsInBlock")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"height":   height,
				"page":     page,
				"pageSize": pageSize}, map[string]interface{}{
				"npa1": npa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronFindTransactionsInBlock(ctx, height, page, pageSize)
}

// TronRisk implements Service
func (_d ServiceWithTracing) TronRisk(ctx context.Context, address string) (rp1 *neo4jstore.Risk, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.TronRisk")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"address": address}, map[string]interface{}{
				"rp1": rp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.TronRisk(ctx, address)
}

// UserFindByEmail implements Service
func (_d ServiceWithTracing) UserFindByEmail(ctx context.Context, email string) (up1 *models.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserFindByEmail")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"email": email}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserFindByEmail(ctx, email)
}

// UserFindByID implements Service
func (_d ServiceWithTracing) UserFindByID(ctx context.Context, id int64) (up1 *models.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserFindByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserFindByID(ctx, id)
}

// UserFindByToken implements Service
func (_d ServiceWithTracing) UserFindByToken(ctx context.Context, token string) (up1 *models.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserFindByToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"token": token}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserFindByToken(ctx, token)
}

// UserList implements Service
func (_d ServiceWithTracing) UserList(ctx context.Context, req *models.UserListRequest) (upa1 []*models.User, i1 int, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserList")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"upa1": upa1,
				"i1":   i1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserList(ctx, req)
}

// UserListByID implements Service
func (_d ServiceWithTracing) UserListByID(ctx context.Context, ids []int64) (upa1 []*models.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserListByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"ids": ids}, map[string]interface{}{
				"upa1": upa1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserListByID(ctx, ids)
}

// UserProfileUpdate implements Service
func (_d ServiceWithTracing) UserProfileUpdate(ctx context.Context, u *models.User, req *models.UserProfileUpdateInput) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserProfileUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"u":   u,
				"req": req}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserProfileUpdate(ctx, u, req)
}

// UserRemove implements Service
func (_d ServiceWithTracing) UserRemove(ctx context.Context, id int64) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserRemove")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserRemove(ctx, id)
}

// UserUpdate implements Service
func (_d ServiceWithTracing) UserUpdate(ctx context.Context, u *models.User, columns ...string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.UserUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"u":       u,
				"columns": columns}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.UserUpdate(ctx, u, columns...)
}
