// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"gitlab.com/rubin-dev/api/pkg/elastic"
	"gitlab.com/rubin-dev/api/pkg/models"
	"gitlab.com/rubin-dev/api/pkg/neo4jstore"
)

type Billing struct {
	Requests        int `json:"requests"`
	HistoryRequests int `json:"historyRequests"`
}

type BillingAddPacketResponse struct {
	Errors  interface{}           `json:"errors"`
	Billing *models.BillingPacket `json:"billing"`
}

type BillingHistoryListInput struct {
	Page     int     `json:"page"`
	PageSize int     `json:"pageSize"`
	From     *string `json:"from"`
	To       *string `json:"to"`
	Last     *bool   `json:"last"`
}

type BillingHistoryListResponse struct {
	Errors interface{}              `json:"errors"`
	Total  *int                     `json:"total"`
	Edge   []*models.BillingRequest `json:"edge"`
}

type BillingKeyResponse struct {
	Errors interface{}          `json:"errors"`
	Total  *int                 `json:"total"`
	Edge   []*models.BillingKey `json:"edge"`
}

type BillingStatisticsFilterInput struct {
	Network string  `json:"network"`
	From    *string `json:"from"`
	To      *string `json:"to"`
	Last    *bool   `json:"last"`
}

type BillingStatisticsResponse struct {
	Errors interface{}                         `json:"errors"`
	Stats  *models.BillingStatisticsBlockchain `json:"stats"`
}

type BillingStatisticsRiskRangeInput struct {
	Network string  `json:"network"`
	From    *string `json:"from"`
	To      *string `json:"to"`
	Last    *bool   `json:"last"`
}

type BillingStatisticsSummaryResponse struct {
	Errors interface{}                 `json:"errors"`
	Items  []*models.StatisticsSummary `json:"items"`
}

type CategoryCreateInput struct {
	Name            string `json:"name"`
	Number          int    `json:"number"`
	DescriptionRu   string `json:"descriptionRu"`
	DescriptionEn   string `json:"descriptionEn"`
	Risk            int    `json:"risk"`
	CategoryGroupID *int   `json:"categoryGroupId"`
}

type CategoryCreateResponse struct {
	Errors   interface{}      `json:"errors"`
	Category *models.Category `json:"category"`
}

type CategoryListResponse struct {
	Errors interface{}        `json:"errors"`
	Edge   []*models.Category `json:"edge"`
}

type CategoryRemoveResponse struct {
	Errors interface{} `json:"errors"`
}

type CategoryUpdateInput struct {
	Name            *string `json:"name"`
	Number          *int    `json:"number"`
	DescriptionRu   *string `json:"descriptionRu"`
	DescriptionEn   *string `json:"descriptionEn"`
	Risk            *int    `json:"risk"`
	CategoryGroupID *int    `json:"categoryGroupId"`
}

type CategoryUpdateResponse struct {
	Errors   interface{}      `json:"errors"`
	Category *models.Category `json:"category"`
}

type ChangePasswordInput struct {
	PasswordCurrent string `json:"passwordCurrent"`
	Password        string `json:"password"`
	PasswordConfirm string `json:"passwordConfirm"`
}

type ChangePasswordResponse struct {
	Jwt    *models.Jwt `json:"jwt"`
	Errors interface{} `json:"errors"`
}

type FindAddressByHashNodeResponse struct {
	Errors interface{}                       `json:"errors"`
	Node   *neo4jstore.FindAddressByHashNode `json:"node"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginResponse struct {
	Jwt    *models.Jwt `json:"jwt"`
	Errors interface{} `json:"errors"`
}

type NodeCountResponse struct {
	Errors interface{} `json:"errors"`
	Has    *bool       `json:"has"`
}

type NodeEntityResponse struct {
	Errors interface{}      `json:"errors"`
	Node   *neo4jstore.Node `json:"node"`
}

type NodeListResponse struct {
	Errors interface{}        `json:"errors"`
	Total  *int               `json:"total"`
	Edge   []*neo4jstore.Node `json:"edge"`
}

type PageInfo struct {
	StartCursor int64 `json:"startCursor"`
	EndCursor   int64 `json:"endCursor"`
	HasNextPage bool  `json:"hasNextPage"`
}

type RefreshTokenInput struct {
	Token *string `json:"token"`
}

type RefreshTokenResponse struct {
	Result *models.Jwt `json:"result"`
	Errors interface{} `json:"errors"`
}

type RegistrationConfirmInput struct {
	Token *string `json:"token"`
}

type RegistrationConfirmResponse struct {
	Jwt    *models.Jwt `json:"jwt"`
	Errors interface{} `json:"errors"`
}

type RegistrationInput struct {
	Name            string `json:"name"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	PasswordConfirm string `json:"passwordConfirm"`
}

type RegistrationResponse struct {
	State  bool        `json:"state"`
	Errors interface{} `json:"errors"`
}

type RestoreCheckInput struct {
	Token *string `json:"token"`
}

type RestoreConfirmInput struct {
	Token           *string `json:"token"`
	Password        *string `json:"password"`
	PasswordConfirm *string `json:"passwordConfirm"`
}

type RestoreConfirmResponse struct {
	Jwt    *models.Jwt `json:"jwt"`
	Errors interface{} `json:"errors"`
}

type RestoreInput struct {
	Email *string `json:"email"`
}

type RestoreResponse struct {
	State  bool        `json:"state"`
	Errors interface{} `json:"errors"`
}

type RiskNodeEntityResponse struct {
	Errors interface{}                `json:"errors"`
	Node   *neo4jstore.Node           `json:"node"`
	Risk   *neo4jstore.CalculatedRisk `json:"risk"`
}

type RiskResponse struct {
	Errors interface{}      `json:"errors"`
	Risk   *neo4jstore.Risk `json:"risk"`
}

type SearchCountResponse struct {
	Errors interface{} `json:"errors"`
	Count  *int        `json:"count"`
}

type SearchResponse struct {
	Errors interface{}       `json:"errors"`
	Total  *int              `json:"total"`
	Edge   []*elastic.Entity `json:"edge"`
}

type StatisticsSummaryInput struct {
	From *string `json:"from"`
	To   *string `json:"to"`
	Last *bool   `json:"last"`
}

type UserListResponse struct {
	Errors interface{}    `json:"errors"`
	Total  *int           `json:"total"`
	Edge   []*models.User `json:"edge"`
}
