type CategoryGroup {
    id: Int!
    nameRu: String!
    nameEn: String!
}

type Category {
    id: ID!
    number: Int!
    name: String!
    descriptionRu: String!
    descriptionEn: String!
    risk: Int!
    categoryGroup: CategoryGroup
}

type CategoryListResponse {
    errors: Any
    edge: [Category!]!
}

type CategoryCreateResponse {
    errors: Any
    category: Category
}

type CategoryUpdateResponse {
    errors: Any
    category: Category
}

type CategoryRemoveResponse {
    errors: Any
}

input CategoryCreateInput {
    name: String!
    number: Int!
    descriptionRu: String!
    descriptionEn: String!
    risk: Int!
    categoryGroupId: Int
}

input CategoryUpdateInput {
    name: String
    number: Int
    descriptionRu: String
    descriptionEn: String
    risk: Int
    categoryGroupId: Int
}

extend type Query {
    categoryList(id: ID): CategoryListResponse!
    categoryAllList: CategoryListResponse!
    categoryFindById(id: ID!): Category
}

extend type Mutation {
    categoryCreate(input: CategoryCreateInput!): CategoryCreateResponse! @auth(permissions: ["category"])
    categoryUpdate(id: ID!, input: CategoryUpdateInput!): CategoryUpdateResponse! @auth(permissions: ["category"])
    categoryRemoveById(id: ID!): CategoryRemoveResponse @auth(permissions: ["category"])
}
